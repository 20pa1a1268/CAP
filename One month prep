WEEK1
1)PLUS MINUS

#!/bin/python3

import math
import os
import random
import re
import sys

def plusMinus(arr):
    # Write your code here
    pcount,ncount,count=0,0,0
    for i in range(len(arr)):
        if arr[i]>0:
            pcount=pcount+1
        elif arr[i]<0:
            ncount=ncount+1
        else:
            count=count+1
    print("{:.6f}".format(pcount/len(arr)))
    print("{:.6f}".format(ncount/len(arr)))
    print("{:.6f}".format(count/len(arr)))
if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    plusMinus(arr)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)MINI MAX SUM

#!/bin/python3

import math
import os
import random
import re
import sys

def miniMaxSum(arr):
    # Write your code here
    arr.sort()
    sum=0
    sum1=0
    for i in range(4):
        sum=sum+arr[i]
    for i in range(1,5):
        sum1=sum1+arr[i]
    print(sum,sum1)
        

if __name__ == '__main__':

    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
3)LONELY INTEGER

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'lonelyinteger' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY a as parameter.
#

def lonelyinteger(a):
    # Write your code here
    a.sort()
    for i in range(len(a)):
        c=a.count(a[i])
        if c==1:
            print(a[i])
        
if __name__ == '__main__':

    n = int(input().strip())

    a = list(map(int, input().rstrip().split()))

    result = lonelyinteger(a)

 -------------------------------------------------------------------------------------------------------------------------------------------------------------------
 4)DIAGONAL DIFFERENCE
 
 #!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'diagonalDifference' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY arr as parameter.
#

def diagonalDifference(arr):
    # Write your code here
    sum1=0
    sum2=0
    for i in range(n):
        sum1=sum1+arr[i][i]
    for i in range(n):
        for j in range(n):
            if i+j==n-1:
                sum2=sum2+arr[i][j]
    return abs(sum1-sum2)
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
5)PANGRAMS

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'pangrams' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def pangrams(s):
    # Write your code here
    a=s.lower()
    b=a.replace(" ","")
    l=[]
    for i in b:
        if i not in l:
            l.append(i)
    if len(l)==26:
            return "pangram"
    else:
        return "not pangram"
            

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = pangrams(s)

    fptr.write(result + '\n')

    fptr.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

6)XOR STRINGS 2

def strings_xor(s, t):
    res = ""
    for i in range(len(s)):
        if s[i] == t[i]:
            res =res+ '0';
        else:
            res = res+'1';

    return res

s = input()
t = input()
print(strings_xor(s, t))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

7)TIME CONVERSION

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'timeConversion' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def timeConversion(s):
    b=s[:-2]
    a=b[:2]
    c1=int(a)
    if "PM" in s:
        if c1==12:
            return b
        a1=12+c1
        d=b.replace(a,str(a1))
        return d
    elif "AM" in s:
        if c1==12:
            d=b.replace(a,"00")
            return d
        else:
            return b
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = timeConversion(s)

    fptr.write(result + '\n')

    fptr.close()
---------------------------------------------------------------------------------------------------------------------------------------------------------
8)SPARSE ARRAYS

#!/bin/python3

import math
import os
import random
import re
import sys


def matchingStrings(strings, queries):
    l=[]
    for i in range(len(queries)):
        c=strings.count(queries[i])
        l.append(c)
    return l          
                    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    strings_count = int(input().strip())

    strings = []

    for _ in range(strings_count):
        strings_item = input()
        strings.append(strings_item)

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)

    res = matchingStrings(strings, queries)

    fptr.write('\n'.join(map(str, res)))
    fptr.write('\n')

    fptr.close()
    
    -----------------------------------------------------------------------------------------------------------------------------------------------------
9)Sub Array Divison 1
    
#!/bin/python3

import math
import os
import random
import re
import sys


def birthday(s, d, m):
    count=0
    for i in range(n-m+1):
        if sum(s[i:i+m])==d:
            count=count+1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = list(map(int, input().rstrip().split()))

    first_multiple_input = input().rstrip().split()

    d = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    result = birthday(s, d, m)

    fptr.write(str(result) + '\n')

    fptr.close()
    
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------
    
10)COUNTING SORT 1
    
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'countingSort' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def countingSort(arr):
    # Write your code here
    l=[]
    arr.sort()
    for i in range(100):
        a=arr.count(i)
        l.append(a)
    return l
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
11)PERMUTING TWO ARRAYS


#!/bin/python3

import math
import os
import random
import re
import sys



def twoArrays(k, A, B):
    # Write your code here
    nocount=0
    A.sort()
    B.sort()
    b=[]
    for i in range(len(B)-1,-1,-1):
        b.append(B[i])
    for i in range(n):
        if  A[i]+b[i]<k:
                nocount+=1
    if nocount==0:
        return "YES"
    else:
        return "NO"
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])

        k = int(first_multiple_input[1])

        A = list(map(int, input().rstrip().split()))

        B = list(map(int, input().rstrip().split()))

        result = twoArrays(k, A, B)

        fptr.write(result + '\n')

    fptr.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

12)FIND MEDIAN

def findMedian(arr):
 arr.sort()
 l=len(arr)
 median=(l-1)//2
 return arr[median]
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

13)FLIPPING MATRIX

def flippingMatrix(matrix):
 # Write your code here
 n=len(matrix)
 a=0
 for i in range(n//2):
     for j in range(n//2):
           a=a+max(matrix[i][j],matrix[i][n-j-1],matrix[n-i-1][j],matrix[n-i-1][n-j-1])
 return a
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEEK 2

1)SALES BY MATCH

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'sockMerchant' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY ar
#

def sockMerchant(n, ar):
    # Write your code here
    l=[]
    count=0
    a=set(ar)
    for i in a:
        d=ar.count(i)
        l.append(d)
    for i in l:
        if i>1:
            count=count+i//2
    return count
        
 if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    ar = list(map(int, input().rstrip().split()))

    result = sockMerchant(n, ar)

    fptr.write(str(result) + '\n')

    fptr.close()
    
---------------------------------------------------------------------------------------------------------------------------------------------------------    
    
 2)ZIG ZAG SEQUENCE
 
 def findZigZagSequence(a, n):
    a.sort()
    mid = int((n - 1)/2)
    a[mid], a[n-1] = a[n-1], a[mid]

    st = mid + 1
    ed = n - 2
    while(st <= ed):
        a[st], a[ed] = a[ed], a[st]
        st = st + 1
        ed = ed - 1

    for i in range (n):
        if i == n-1:
            print(a[i])
        else:
            print(a[i], end = ' ')
    return

test_cases = int(input())
for cs in range (test_cases):
    n = int(input())
    a = list(map(int, input().split()))
    findZigZagSequence(a, n)




 
 





