WEEK1

1)PLUS MINUS

#!/bin/python3

import math
import os
import random
import re
import sys

def plusMinus(arr):
    # Write your code here
    pcount,ncount,count=0,0,0
    for i in range(len(arr)):
        if arr[i]>0:
            pcount=pcount+1
        elif arr[i]<0:
            ncount=ncount+1
        else:
            count=count+1
    print("{:.6f}".format(pcount/len(arr)))
    print("{:.6f}".format(ncount/len(arr)))
    print("{:.6f}".format(count/len(arr)))
if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    plusMinus(arr)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)MINI MAX SUM

#!/bin/python3

import math
import os
import random
import re
import sys

def miniMaxSum(arr):
    # Write your code here
    arr.sort()
    sum=0
    sum1=0
    for i in range(4):
        sum=sum+arr[i]
    for i in range(1,5):
        sum1=sum1+arr[i]
    print(sum,sum1)
        

if __name__ == '__main__':

    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
3)LONELY INTEGER

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'lonelyinteger' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY a as parameter.
#

def lonelyinteger(a):
    # Write your code here
    a.sort()
    for i in range(len(a)):
        c=a.count(a[i])
        if c==1:
            print(a[i])
        
if __name__ == '__main__':

    n = int(input().strip())

    a = list(map(int, input().rstrip().split()))

    result = lonelyinteger(a)

 -------------------------------------------------------------------------------------------------------------------------------------------------------------------
 4)DIAGONAL DIFFERENCE
 
 #!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'diagonalDifference' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY arr as parameter.
#

def diagonalDifference(arr):
    # Write your code here
    sum1=0
    sum2=0
    for i in range(n):
        sum1=sum1+arr[i][i]
    for i in range(n):
        for j in range(n):
            if i+j==n-1:
                sum2=sum2+arr[i][j]
    return abs(sum1-sum2)
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
5)PANGRAMS

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'pangrams' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def pangrams(s):
    # Write your code here
    a=s.lower()
    b=a.replace(" ","")
    l=[]
    for i in b:
        if i not in l:
            l.append(i)
    if len(l)==26:
            return "pangram"
    else:
        return "not pangram"
            

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = pangrams(s)

    fptr.write(result + '\n')

    fptr.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

6)XOR STRINGS 2

def strings_xor(s, t):
    res = ""
    for i in range(len(s)):
        if s[i] == t[i]:
            res =res+ '0';
        else:
            res = res+'1';

    return res

s = input()
t = input()
print(strings_xor(s, t))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

7)TIME CONVERSION

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'timeConversion' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def timeConversion(s):
    b=s[:-2]
    a=b[:2]
    c1=int(a)
    if "PM" in s:
        if c1==12:
            return b
        a1=12+c1
        d=b.replace(a,str(a1))
        return d
    elif "AM" in s:
        if c1==12:
            d=b.replace(a,"00")
            return d
        else:
            return b
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = timeConversion(s)

    fptr.write(result + '\n')

    fptr.close()
---------------------------------------------------------------------------------------------------------------------------------------------------------
8)SPARSE ARRAYS

#!/bin/python3

import math
import os
import random
import re
import sys


def matchingStrings(strings, queries):
    l=[]
    for i in range(len(queries)):
        c=strings.count(queries[i])
        l.append(c)
    return l          
                    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    strings_count = int(input().strip())

    strings = []

    for _ in range(strings_count):
        strings_item = input()
        strings.append(strings_item)

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)

    res = matchingStrings(strings, queries)

    fptr.write('\n'.join(map(str, res)))
    fptr.write('\n')

    fptr.close()
    
    -----------------------------------------------------------------------------------------------------------------------------------------------------
9)Sub Array Divison 1
    
#!/bin/python3

import math
import os
import random
import re
import sys


def birthday(s, d, m):
    count=0
    for i in range(n-m+1):
        if sum(s[i:i+m])==d:
            count=count+1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = list(map(int, input().rstrip().split()))

    first_multiple_input = input().rstrip().split()

    d = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    result = birthday(s, d, m)

    fptr.write(str(result) + '\n')

    fptr.close()
    
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------
    
10)COUNTING SORT 1
    
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'countingSort' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def countingSort(arr):
    # Write your code here
    l=[]
    arr.sort()
    for i in range(100):
        a=arr.count(i)
        l.append(a)
    return l
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
11)PERMUTING TWO ARRAYS


#!/bin/python3

import math
import os
import random
import re
import sys



def twoArrays(k, A, B):
    # Write your code here
    nocount=0
    A.sort()
    B.sort()
    b=[]
    for i in range(len(B)-1,-1,-1):
        b.append(B[i])
    for i in range(n):
        if  A[i]+b[i]<k:
                nocount+=1
    if nocount==0:
        return "YES"
    else:
        return "NO"
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])

        k = int(first_multiple_input[1])

        A = list(map(int, input().rstrip().split()))

        B = list(map(int, input().rstrip().split()))

        result = twoArrays(k, A, B)

        fptr.write(result + '\n')

    fptr.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
12)FLIPPING BITS

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'flippingBits' function below.
#
# The function is expected to return a LONG_INTEGER.
# The function accepts LONG_INTEGER n as parameter.
#

def flippingBits(n):
    # Write your code here
    s=""
    while(n>=1):
         s=s+str(n%2)
         n=n//2
    while(len(s)<32):
             s=s+'0'
    a=s[::-1]
    res=""
    for i in a:
        if i=='1':
            res=res+'0'
        elif i=='0':
            res=res+'1'
    k=list(res) 
    b=[int(i) for i in k] 
    for i in range(32):
        b[i]=b[i]*(2**(31-i))
    return sum(b)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        n = int(input().strip())

        result = flippingBits(n)

        fptr.write(str(result) + '\n')

    fptr.close()
---------------------------------------------------------------------------------------------------------------------------------------------------------
13)FIND MEDIAN

def findMedian(arr):
 arr.sort()
 l=len(arr)
 median=(l-1)//2
 return arr[median]
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

14)FLIPPING MATRIX

def flippingMatrix(matrix):
 # Write your code here
 n=len(matrix)
 a=0
 for i in range(n//2):
     for j in range(n//2):
           a=a+max(matrix[i][j],matrix[i][n-j-1],matrix[n-i-1][j],matrix[n-i-1][n-j-1])
 return a
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEEK 2

1)SALES BY MATCH

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'sockMerchant' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY ar
#

def sockMerchant(n, ar):
    # Write your code here
    l=[]
    count=0
    a=set(ar)
    for i in a:
        d=ar.count(i)
        l.append(d)
    for i in l:
        if i>1:
            count=count+i//2
    return count
        
 if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    ar = list(map(int, input().rstrip().split()))

    result = sockMerchant(n, ar)

    fptr.write(str(result) + '\n')

    fptr.close()
    
---------------------------------------------------------------------------------------------------------------------------------------------------------    
    
 2)ZIG ZAG SEQUENCE
 
 def findZigZagSequence(a, n):
    a.sort()
    mid = int((n - 1)/2)
    a[mid], a[n-1] = a[n-1], a[mid]

    st = mid + 1
    ed = n - 2
    while(st <= ed):
        a[st], a[ed] = a[ed], a[st]
        st = st + 1
        ed = ed - 1

    for i in range (n):
        if i == n-1:
            print(a[i])
        else:
            print(a[i], end = ' ')
    return

test_cases = int(input())
for cs in range (test_cases):
    n = int(input())
    a = list(map(int, input().split()))
    findZigZagSequence(a, n)
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------
3)DRAWING BOOK

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'pageCount' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER p
#

def pageCount(n, p):
    # Write your code here
    front=p//2
    if n%2==0 and n-p==1:
        back=1
    else:
        back=(n-p)//2
    return min(front,back)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    p = int(input().strip())

    result = pageCount(n, p)

    fptr.write(str(result) + '\n')

    fptr.close()
---------------------------------------------------------------------------------------------------------------------------------------------------------
4)TOWER BREAKERS

#!/bin/python3

import math
import os
import random
import re
import sys



def towerBreakers(n, m):
    # Write your code here
    if n%2==0 or(n%2!=0 and m==1):
        return 2
    else:
        return 1

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])

        m = int(first_multiple_input[1])

        result = towerBreakers(n, m)

        fptr.write(str(result) + '\n')

    fptr.close()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
5)CAESAR CIPHER

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'caesarCipher' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. STRING s
#  2. INTEGER k
#

def caesarCipher(s, k):
    # Write your code here
    l=[]
    for i in s:
        if i in "abcdefghijklmnopqrstuvwxyz":
            a=ord(i)+k
            while(a>122):
                a=a-26
            l.append(chr(a))
        elif i in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            a=ord(i)+k
            while(a>90):
                a=a-26
            l.append(chr(a))
        else:
            l.append(i)
    res=""
    for i in l:
        res+=i
    return res

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = input()

    k = int(input().strip())

    result = caesarCipher(s, k)

    fptr.write(result + '\n')

    fptr.close()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
6)PRIME DATES

import re
month = []

def updateLeapYear(year):
    if year % 400 == 0:
        month[2] = 29
    elif year % 100 == 0:
        month[2] = 28
    elif year % 4 == 0:
        month[2] = 29
    else:
        month[2] = 28

def storeMonth():
    month[1] = 31
    month[2] = 28
    month[3] = 31
    month[4] = 30
    month[5] = 31
    month[6] = 30
    month[7] = 31
    month[8] = 31
    month[9] = 30
    month[10] = 31
    month[11] = 30
    month[12] = 31

def findPrimeDates(d1, m1, y1, d2, m2, y2):
    storeMonth()
    result = 0

    while(True):
        x = d1
        x = x * 100 + m1
        x = x * 10000 + y1
        if x % 4 == 0 or x % 7 == 0:
            result = result + 1
        if d1 == d2 and m1 == m2 and y1 == y2:
            break
        updateLeapYear(y1)
        d1 = d1 + 1
        if d1 > month[m1]:
            m1 = m1 + 1
            d1 = 1
            if m1 > 12:
                y1 =  y1 + 1
                m1 =1
    return result;

for i in range(1, 15):
    month.append(31)

line = input()
date = re.split('-| ', line)
d1 = int(date[0])
m1 = int(date[1])
y1 = int(date[2])
d2 = int(date[3])
m2 = int(date[4])
y2 = int(date[5])

result = findPrimeDates(d1, m1, y1, d2, m2, y2)
print(result)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7)MAX MIN

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'maxMin' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER k
#  2. INTEGER_ARRAY arr
#

def maxMin(k, arr):
    # Write your code here
    arr.sort()
    ans=arr[k-1]-arr[0]
    for i in range(n-k+1):
        if arr[i+k-1]-arr[i]<ans:
            ans=arr[i+k-1]-arr[i]
    return ans
    
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    k = int(input().strip())

    arr = []

    for _ in range(n):
        arr_item = int(input().strip())
        arr.append(arr_item)

    result = maxMin(k, arr)

    fptr.write(str(result) + '\n')

    fptr.close()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
8)DYNAMIC ARRAY

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'dynamicArray' function below.
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER n
#  2. 2D_INTEGER_ARRAY queries
#

def dynamicArray(n, queries):
    
    arr = [[] for _ in range(n)]
    lastAnswer = 0
    for q in queries:
        query, x, y = q
        if query == 1:
            idx=(x^lastAnswer)%n
            arr[idx].append(y)
        elif query == 2:
            idx=(x^lastAnswer)%n
            s = arr[idx]
            lastAnswer = s[y % len(s)]
            print(lastAnswer)


if __name__ == '__main__':

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    q = int(first_multiple_input[1])

    queries = []

    for _ in range(q):
        queries.append(list(map(int, input().rstrip().split())))

    result = dynamicArray(n, queries)

    

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9)GRID CHALLENGE

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'gridChallenge' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING_ARRAY grid as parameter.
#

def gridChallenge(grid):
    # Write your code here
    grid=[list(row) for row in grid]
    for i in range(len(grid)):
        grid[i].sort()
    for i in range(len(grid[0])):
        for j in range(len(grid)-1):
            if not (grid[j][i]<=grid[j+1][i]):
                return "NO"
    else:
        return "YES"
            
                
        
            
        
                
            

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        n = int(input().strip())

        grid = []

        for _ in range(n):
            grid_item = input()
            grid.append(grid_item)

        result = gridChallenge(grid)

        fptr.write(result + '\n')

    fptr.close()

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
10)SHERLOCK AND ARRAY

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'balancedSums' function below.
#
# The function is expected to return a STRING.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def balancedSums(arr):
    # Write your code here
    i=0
    j=n-1
    lsum=arr[i]
    rsum=arr[j]
    while(i!=j):
        if lsum<rsum:
            i+=1
            lsum=lsum+arr[i]
        else:
            j-=1
            rsum=rsum+arr[j]
    if lsum==rsum:
        return "YES"
    else:
        return "NO"
            


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    T = int(input().strip())

    for T_itr in range(T):
        n = int(input().strip())

        arr = list(map(int, input().rstrip().split()))

        result = balancedSums(arr)

        fptr.write(result + '\n')

    fptr.close()
    
  ----------------------------------------------------------------------------------------------------------------------------------------------------------
 11)RECURSIVE DIGIT SUM
 
 #!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'superDigit' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. STRING n
#  2. INTEGER k
#

def superDigit(n, k):
    # Write your code here
    sum1=str(sum([int(x) for x in n]))*k
    def alldigits(n):
        n=str(sum([int(x) for x in n]))
        if len(n)==1:
            return n
        else:
            return alldigits(n)
    return alldigits(sum1)
    


    
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]

    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    fptr.write(str(result) + '\n')

    fptr.close()
---------------------------------------------------------------------------------------------------------------------------------------------------------
12)COUNTER GAME

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'counterGame' function below.
#
# The function is expected to return a STRING.
# The function accepts LONG_INTEGER n as parameter.
#

def counterGame(n):
    # Write your code here
    counter=bin(n-1).count('1')
    if counter%2==0:
        return "Richard"
    else:
        return "Louise"
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        n = int(input().strip())

        result = counterGame(n)

        fptr.write(result + '\n')

    fptr.close()
=========================================================================================================================================================================
13)Sum vs XOR

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'sumXor' function below.
#
# The function is expected to return a LONG_INTEGER.
# The function accepts LONG_INTEGER n as parameter.
#

def sumXor(n):
    # Write your code here
    
    if n==0:
        return '1'
    else:
        a=bin(n).count('0')
        return 2**(a-1)


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = sumXor(n)

    fptr.write(str(result) + '\n')

    fptr.close()
==================================================================================================================================================================================
REGULAR 109

1)TCS6
a=int(input())
if(a%2==0):
    n1=1
    n2=1
    for i in range(6,a+1,2):
        c=n1+n2
        n1=n2
        n2=c
    print(c)
else:
    print(a)
===================================================================================================================================================================
2)sTRING PALINDROME 4
a=input().lower()
p=a[::-1]
if(p==a):
    print('Palindrome')
else:
    print('Not Palindrome')
=========================================================================================================================================================

3)SUPER REDUCED STRING

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'superReducedString' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def superReducedString(s):
    # Write your code here
    l=[]
    for i in range (len(s)):
        if len(l)==0 or l[-1]!=s[i]:
            l.append(s[i])
        else:
            l.pop()
    if len(l)==0:
        return "Empty String"
    else:
        return "".join(l)


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = superReducedString(s)

    fptr.write(result + '\n')

    fptr.close()
============================================================================================================================================================
4)SIMILAR CHAR

l=int(input())
s=input()
q=int(input())
for i in range(q):
    n=int(input())
    c=s[n-1]
    s1=s[:n-1]
    count=s1.count(c)
    print(count)
 =============================================================================================================================================================================================
5)FORM LARGEST EVEN NUMBER

s=input()
s1=""
cout=0
for i in s:
    if i in "97531" and i not in s1:
        s1+=i
    elif i in "86420" and i not in s1:
        s1+=i
        cout+=1
l=[]
for i in s1:
    l.append(int(i))
l.sort(reverse=True)
b=len(l)
for i in range(b-1,-1,-1):
    if l[i]%2==0:
        a=""
        for i in l:
            a=a+str(i)
        print(a)
        break
    elif l[i]%2!=0 and l[i-1]%2==0:
        temp=l[i]
        l[i]=l[i-1]
        l[i-1]=temp
        a=""
        for i in l:
            a=a+str(i)
        print(a)
        break
else:
    print(-1)
=========================================================================================================================================================================
    
